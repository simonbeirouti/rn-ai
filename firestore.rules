rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // =====================================================================
    // Users Collection
    // Public user data (displayName, bio) is readable by any authenticated user.
    // Users can only create/update their own documents.
    // =====================================================================
    match /users/{userId} {
      // Allow reading public user profiles by any authenticated user
      allow read: if isAuthenticated();
      
      // Allow user creation and updates, but only by the owner
      // Public fields: displayName, bio, createdAt, updatedAt
      allow create, update: if isAuthenticated() && isOwner(userId);
      
      // Allow user deletion by owner (for account deletion)
      allow delete: if isAuthenticated() && isOwner(userId);

      // Private subcollection for sensitive user data
      match /private/{privateDocId} {
        // Only the user themselves can read or write their private documents
        // Private fields: email, interests, communicationStyle, goals, hasCompletedOnboarding
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // =====================================================================
    // Data Fragments Collection
    // Users can create, read, update, and delete their own data fragments.
    // This is the core privacy rule.
    // =====================================================================
    match /data_fragments/{fragmentId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Reading/deleting requires checking the userId from the existing document.
      allow read: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/data_fragments/$(fragmentId)).data.userId);

      // Updates are allowed, but the userId cannot be changed.
      allow update: if isAuthenticated() 
                    && isOwner(get(/databases/$(database)/documents/data_fragments/$(fragmentId)).data.userId)
                    && request.resource.data.userId == resource.data.userId;
      
      // Fragments are not deletable by clients for now.
      allow delete: if false;
    }

    // =====================================================================
    // Channels Collection
    // Channels are private to a user. They can be created and managed, but not deleted.
    // =====================================================================
    match /channels/{channelId} {
      // A user can create a channel for themselves.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      // Only the owner can read or update their own channel.
      allow read, update: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/channels/$(channelId)).data.userId);
      // Deletes are disallowed for now.
      allow delete: if false;
    }
    
    // =====================================================================
    // Conversations and Messages
    // Users can manage their own conversations and the messages within them.
    // =====================================================================
    match /conversations/{conversationId} {
      // The user ID must be present and match the authenticated user on creation.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);

      // Only the owner of the conversation can read, update, or delete it.
      allow read, update, delete: if isAuthenticated() && isOwner(resource.data.userId);

      // Messages sub-collection
      match /messages/{messageId} {
        // The owner of the conversation can read and create messages.
        allow read, create: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/conversations/$(conversationId)).data.userId);
        
        // Messages are immutable to preserve chat history.
        allow update, delete: if false;
      }
    }
    
    // =====================================================================
    // Stats Collection
    // This is managed by Cloud Functions, no direct client access.
    // =====================================================================
    match /stats/{statId} {
      // Nobody can read or write to the stats collection directly.
      // This is managed by Cloud Functions.
      allow read, write: if false;

      match /daily/{dayId} {
        allow read, write: if false;
      }
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}